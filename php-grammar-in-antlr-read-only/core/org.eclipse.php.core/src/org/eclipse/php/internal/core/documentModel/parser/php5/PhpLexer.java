/* The following code was generated by JFlex 1.4.1 on 7/19/09 11:18 AM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.documentModel.parser.php5;

import org.eclipse.php.internal.core.util.collections.IntHashtable;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 7/19/09 11:18 AM from the specification file
 * <tt>highlighting_scanner.jflex</tt>
 */
public class PhpLexer extends org.eclipse.php.internal.core.documentModel.parser.AbstractPhpLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_LINE_COMMENT = 12;
  public static final int ST_PHP_DOUBLE_QUOTES = 2;
  public static final int ST_PHP_COMMENT = 10;
  public static final int ST_PHP_BACKQUOTE = 3;
  public static final int ST_PHP_DOC_COMMENT = 11;
  public static final int ST_PHP_START_HEREDOC = 6;
  public static final int ST_PHP_END_HEREDOC = 7;
  public static final int ST_PHP_VAR_OFFSET = 9;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 1;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 8;
  public static final int ST_PHP_HEREDOC = 5;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 13;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\15\2\0\1\11\22\0\1\12\1\26\1\17\1\74"+
    "\1\16\1\32\1\33\1\73\1\62\1\64\1\30\1\25\1\13\1\4"+
    "\1\2\1\31\1\5\11\1\1\60\1\14\1\27\1\23\1\24\1\75"+
    "\1\76\1\40\1\7\1\47\1\42\1\3\1\45\1\63\1\52\1\43"+
    "\1\65\1\55\1\54\1\57\1\41\1\36\1\56\1\67\1\37\1\50"+
    "\1\44\1\46\1\61\1\53\1\6\1\51\1\10\1\71\1\20\1\72"+
    "\1\35\1\66\1\21\1\40\1\7\1\47\1\42\1\3\1\45\1\63"+
    "\1\52\1\43\1\65\1\55\1\54\1\57\1\41\1\36\1\56\1\67"+
    "\1\37\1\50\1\44\1\46\1\61\1\53\1\6\1\51\1\10\1\22"+
    "\1\34\1\70\1\13\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\10\0\1\2\1\3\1\4\1\5\1\4"+
    "\1\3\3\5\1\6\1\4\1\7\1\4\1\10\1\11"+
    "\1\12\12\4\16\5\1\4\1\5\1\4\2\5\1\13"+
    "\1\2\1\14\1\4\1\1\1\15\1\16\2\15\1\1"+
    "\3\15\3\17\2\1\3\2\2\20\1\21\1\22\1\23"+
    "\1\22\1\3\1\24\1\3\1\25\1\24\1\26\2\27"+
    "\3\30\3\31\3\32\1\33\1\34\1\3\1\0\1\35"+
    "\6\5\1\36\2\0\1\5\1\0\1\37\2\0\1\15"+
    "\2\0\2\35\1\40\1\41\1\35\4\5\1\42\2\5"+
    "\1\43\2\5\1\44\26\5\1\45\1\5\12\0\2\5"+
    "\1\0\1\46\3\0\1\47\2\50\1\51\1\52\1\50"+
    "\3\0\3\53\1\54\3\0\1\1\2\50\1\0\1\55"+
    "\1\0\1\56\1\47\1\57\1\60\20\0\1\61\1\62"+
    "\1\0\7\5\1\3\1\0\1\5\2\0\4\5\1\63"+
    "\2\5\1\64\6\5\1\65\1\5\1\66\5\5\1\67"+
    "\16\5\1\70\12\0\6\5\1\71\1\72\1\1\34\0"+
    "\1\73\6\5\1\74\1\75\1\5\1\76\1\5\1\0"+
    "\1\77\13\5\1\100\2\5\1\101\7\5\1\102\2\5"+
    "\1\103\3\5\1\104\5\5\12\0\7\5\23\0\1\105"+
    "\13\0\1\106\1\0\2\5\1\107\4\5\1\110\1\111"+
    "\2\112\3\5\1\113\5\5\1\114\1\5\1\115\1\5"+
    "\1\116\1\117\1\5\1\120\1\5\1\121\1\122\1\123"+
    "\1\124\2\5\1\125\1\5\1\126\3\5\7\0\1\127"+
    "\2\0\7\5\6\0\1\130\1\131\3\0\1\132\4\0"+
    "\1\133\5\0\1\134\10\0\2\5\1\135\2\5\1\136"+
    "\1\137\13\5\1\140\1\141\2\5\1\142\1\143\4\0"+
    "\1\144\6\5\13\0\1\145\3\0\1\146\4\0\1\147"+
    "\2\0\1\150\2\0\1\151\4\5\1\152\1\5\1\153"+
    "\1\154\1\5\1\155\2\5\1\156\3\5\1\157\2\0"+
    "\6\5\2\0\1\160\1\0\1\161\1\162\2\0\1\163"+
    "\1\0\1\164\3\0\1\165\4\0\1\166\1\0\1\167"+
    "\3\5\1\170\1\5\1\171\4\5\1\172\1\173\1\5"+
    "\1\174\3\5\1\175\1\5\1\176\12\0\1\177\1\0"+
    "\1\200\1\201\2\5\1\202\1\5\1\203\3\5\1\204"+
    "\1\5\1\205\2\5\1\0\1\206\1\0\1\207\1\210"+
    "\2\0\1\211\2\0\1\212\1\213\1\214\2\5\1\215"+
    "\1\216\2\5\1\217\1\220\2\0\1\221\1\222\1\0"+
    "\4\5\1\223\1\224\1\225\1\226\1\227\1\230\3\5"+
    "\1\231";

  private static int [] zzUnpackAction() {
    int [] result = new int[708];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\0\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\0\0\0\0\u05a9\0\u05e8\0\0\0\0\0\u0627\0\u0666"+
    "\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e"+
    "\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56"+
    "\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e"+
    "\0\u0c8d\0\u0ccc\0\u0d0b\0\0\0\u0d4a\0\0\0\u0d89\0\u0dc8"+
    "\0\u0e07\0\0\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
    "\0\0\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a"+
    "\0\0\0\u1179\0\0\0\0\0\u11b8\0\u11f7\0\u1236\0\0"+
    "\0\u1275\0\0\0\u12b4\0\0\0\u12f3\0\u1332\0\0\0\u1371"+
    "\0\u13b0\0\u13ef\0\u142e\0\0\0\0\0\u146d\0\u0d89\0\0"+
    "\0\u14ac\0\u14eb\0\u152a\0\0\0\u1569\0\u15a8\0\u15e7\0\u1626"+
    "\0\u1665\0\u16a4\0\0\0\u16e3\0\u1722\0\u1761\0\u0d4a\0\u17a0"+
    "\0\u05e8\0\u17df\0\0\0\u181e\0\u185d\0\u0762\0\u189c\0\u18db"+
    "\0\u191a\0\u052b\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u052b\0\u1a55"+
    "\0\u1a94\0\u052b\0\u1ad3\0\u1b12\0\u052b\0\u1b51\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\0\0\u20bb\0\u20fa\0\u0c8d\0\u2139"+
    "\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331"+
    "\0\u2370\0\u23af\0\u23ee\0\u242d\0\u0e46\0\u246c\0\u24ab\0\u242d"+
    "\0\0\0\0\0\0\0\u246c\0\u24ea\0\u0f42\0\u2529\0\u24ea"+
    "\0\0\0\u2529\0\0\0\u2568\0\u10fb\0\u25a7\0\u25e6\0\u2568"+
    "\0\u25a7\0\u1179\0\0\0\u2625\0\0\0\u2664\0\0\0\0"+
    "\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c"+
    "\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54"+
    "\0\0\0\u2a93\0\u1236\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce"+
    "\0\u2c0d\0\u2c4c\0\u16e3\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87"+
    "\0\u2dc6\0\u2e05\0\u2e44\0\u052b\0\u2e83\0\u2ec2\0\u052b\0\u2f01"+
    "\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u052b\0\u307b\0\u30ba"+
    "\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u052b\0\u3234\0\u3273"+
    "\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b"+
    "\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u052b\0\u35a6\0\u35e5\0\u3624"+
    "\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c"+
    "\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\0\0\0\0\u3996"+
    "\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e"+
    "\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86"+
    "\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e"+
    "\0\u3fbd\0\u3ffc\0\u403b\0\u407a\0\u052b\0\u40b9\0\u40f8\0\u4137"+
    "\0\u4176\0\u41b5\0\u41f4\0\u052b\0\u4233\0\u4272\0\u052b\0\u42b1"+
    "\0\u42f0\0\u2d48\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a"+
    "\0\u44a9\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u052b\0\u45e4\0\u4623"+
    "\0\u052b\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc"+
    "\0\u052b\0\u481b\0\u485a\0\u052b\0\u4899\0\u48d8\0\u4917\0\u052b"+
    "\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f"+
    "\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89\0\u4cc8\0\u4d07"+
    "\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\u4e81\0\u4ec0\0\u4eff"+
    "\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u503a\0\u5079\0\u50b8\0\u50f7"+
    "\0\u5136\0\u5175\0\u51b4\0\u51f3\0\u5232\0\u5271\0\u52b0\0\u52ef"+
    "\0\u532e\0\0\0\u536d\0\u53ac\0\u53eb\0\u542a\0\u5469\0\u54a8"+
    "\0\u54e7\0\u5526\0\u5565\0\u55a4\0\u55e3\0\0\0\u5622\0\u5661"+
    "\0\u56a0\0\u052b\0\u56df\0\u571e\0\u575d\0\u579c\0\u052b\0\u052b"+
    "\0\u57db\0\0\0\u581a\0\u5859\0\u5898\0\u052b\0\u58d7\0\u5916"+
    "\0\u5955\0\u5994\0\u59d3\0\u052b\0\u5a12\0\u052b\0\u5a51\0\u052b"+
    "\0\u052b\0\u5a90\0\u052b\0\u5acf\0\u052b\0\u052b\0\u052b\0\u052b"+
    "\0\u5b0e\0\u5b4d\0\u052b\0\u5b8c\0\u052b\0\u5bcb\0\u5c0a\0\u5c49"+
    "\0\u5c88\0\u5cc7\0\u5d06\0\u5d45\0\u5d84\0\u5dc3\0\u5e02\0\0"+
    "\0\u5e41\0\u5e80\0\u5ebf\0\u5efe\0\u5f3d\0\u5f7c\0\u5fbb\0\u5ffa"+
    "\0\u6039\0\u6078\0\u60b7\0\u60f6\0\u6135\0\u6174\0\u61b3\0\0"+
    "\0\0\0\u61f2\0\u6231\0\u6270\0\0\0\u62af\0\u62ee\0\u632d"+
    "\0\u636c\0\0\0\u63ab\0\u63ea\0\u6429\0\u6468\0\u64a7\0\0"+
    "\0\u64e6\0\u6525\0\u6564\0\u65a3\0\u65e2\0\u6621\0\u6660\0\u669f"+
    "\0\u66de\0\u671d\0\u675c\0\u679b\0\u67da\0\u052b\0\u052b\0\u6819"+
    "\0\u6858\0\u6897\0\u68d6\0\u6915\0\u6954\0\u6993\0\u69d2\0\u6a11"+
    "\0\u6a50\0\u6a8f\0\u052b\0\u052b\0\u6ace\0\u6b0d\0\u052b\0\u052b"+
    "\0\u6b4c\0\u6b8b\0\u6bca\0\u6c09\0\u052b\0\u6c48\0\u6c87\0\u6cc6"+
    "\0\u6d05\0\u6d44\0\u6d83\0\u6dc2\0\u6e01\0\u6e40\0\u6e7f\0\u6ebe"+
    "\0\u6efd\0\u6f3c\0\u6f7b\0\u6fba\0\u6ff9\0\u7038\0\0\0\u7077"+
    "\0\u70b6\0\u70f5\0\0\0\u7134\0\u7173\0\u71b2\0\u71f1\0\0"+
    "\0\u7230\0\u726f\0\0\0\u72ae\0\u72ed\0\u052b\0\u732c\0\u736b"+
    "\0\u73aa\0\u73e9\0\u7428\0\u7467\0\u052b\0\u052b\0\u74a6\0\u74e5"+
    "\0\u7524\0\u7563\0\u052b\0\u75a2\0\u75e1\0\u7620\0\u052b\0\u765f"+
    "\0\u769e\0\u76dd\0\u771c\0\u775b\0\u779a\0\u77d9\0\u7818\0\u7857"+
    "\0\u7896\0\0\0\u78d5\0\0\0\0\0\u7914\0\u7953\0\0"+
    "\0\u7992\0\0\0\u79d1\0\u7a10\0\u7a4f\0\u7a8e\0\u7acd\0\u7b0c"+
    "\0\u7b4b\0\u7b8a\0\0\0\u7bc9\0\0\0\u7c08\0\u7c47\0\u7c86"+
    "\0\u052b\0\u7cc5\0\u052b\0\u7d04\0\u7d43\0\u7d82\0\u7dc1\0\u052b"+
    "\0\u052b\0\u7e00\0\u052b\0\u7e3f\0\u7e7e\0\u7ebd\0\u052b\0\u7efc"+
    "\0\0\0\u7f3b\0\u7f7a\0\u7fb9\0\u7ff8\0\u8037\0\u8076\0\u80b5"+
    "\0\u80f4\0\u8133\0\u8172\0\0\0\u81b1\0\0\0\0\0\u81f0"+
    "\0\u822f\0\u052b\0\u826e\0\u052b\0\u82ad\0\u82ec\0\u832b\0\u052b"+
    "\0\u836a\0\u052b\0\u83a9\0\u83e8\0\u8427\0\0\0\u8466\0\0"+
    "\0\0\0\u84a5\0\u84e4\0\0\0\u8523\0\u8562\0\0\0\u052b"+
    "\0\u052b\0\u85a1\0\u85e0\0\u052b\0\u052b\0\u861f\0\u865e\0\u052b"+
    "\0\0\0\u869d\0\u86dc\0\0\0\0\0\u871b\0\u875a\0\u8799"+
    "\0\u87d8\0\u8817\0\0\0\0\0\0\0\u052b\0\u052b\0\u052b"+
    "\0\u8856\0\u8895\0\u88d4\0\u052b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[708];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\77\0\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\30\1\31\1\32\1\30\1\33\1\34"+
    "\1\17\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\44\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\2\27\1\64\1\65\1\27\1\66\1\27\1\67"+
    "\1\70\1\71\1\72\1\31\1\27\1\73\1\27\1\74"+
    "\2\31\1\75\1\76\1\77\1\31\16\100\1\101\1\102"+
    "\1\103\1\100\1\104\54\100\16\105\1\106\1\105\1\107"+
    "\1\102\1\110\54\105\4\111\1\112\15\111\1\113\54\111"+
    "\11\114\1\115\3\114\1\115\1\116\1\114\1\117\1\114"+
    "\1\120\54\114\3\121\1\122\2\121\3\122\25\121\22\122"+
    "\1\121\1\122\1\121\1\122\1\121\3\122\7\121\77\123"+
    "\3\124\1\125\1\126\1\124\3\125\25\124\22\125\1\124"+
    "\1\125\1\124\1\125\1\124\3\125\7\124\1\17\1\127"+
    "\1\130\1\27\1\130\1\131\3\27\2\132\2\130\1\132"+
    "\1\133\1\130\1\132\15\130\22\27\1\130\1\27\1\130"+
    "\1\27\1\130\3\27\1\130\1\31\1\134\2\132\2\130"+
    "\30\135\1\136\46\135\30\137\1\140\45\137\1\141\11\142"+
    "\1\143\3\142\1\144\6\142\1\145\5\142\1\146\42\142"+
    "\1\147\1\142\11\150\2\151\2\150\1\151\61\150\1\0"+
    "\1\20\1\152\1\153\1\0\1\20\72\0\1\152\3\0"+
    "\1\152\15\0\1\154\54\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\155\2\27\25\0\3\27\1\156\5\27\1\157"+
    "\4\27\1\160\2\27\1\161\1\0\1\162\1\0\1\27"+
    "\1\0\3\27\13\0\1\154\16\0\1\154\1\163\53\0"+
    "\1\20\1\152\1\153\1\0\1\20\1\164\71\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\1\51\21\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\6\0\1\34\7\0\1\165\6\0"+
    "\1\27\1\166\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\3\0\1\167\4\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\20\0\2\30\2\0\1\30\64\0\1\170\2\0"+
    "\3\170\25\0\22\170\1\0\1\170\1\0\1\170\1\0"+
    "\3\170\7\0\16\171\1\172\1\173\1\174\1\171\1\175"+
    "\54\171\23\0\1\176\1\154\75\0\1\154\1\176\75\0"+
    "\1\154\1\0\1\154\74\0\1\176\76\0\2\154\2\0"+
    "\1\177\72\0\1\154\76\0\1\154\4\0\1\200\1\76"+
    "\70\0\1\154\1\201\75\0\1\154\7\0\1\154\66\0"+
    "\1\154\10\0\1\154\43\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\27\1\202\20\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\203\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\2\27\1\204"+
    "\1\27\25\0\1\27\1\205\1\27\1\206\6\27\1\207"+
    "\7\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\210\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\211\1\0\4\27\25\0\1\212\4\27\1\213\14\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\214\3\27"+
    "\1\215\2\27\1\216\6\27\1\217\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\27\1\220\12\27\1\221\5\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\222\1\223\1\224\2\27"+
    "\1\225\2\27\1\226\11\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\227\6\27\1\230\7\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\231\1\27\1\232\13\27\1\233"+
    "\3\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\234\1\0\4\27\25\0\6\27\1\235"+
    "\6\27\1\236\4\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\14\27\1\237\5\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\5\27\1\240\14\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\241\1\242\5\27\1\243\11\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\67\0\1\244\17\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\2\27\1\245\17\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\16\0\1\246"+
    "\2\0\1\247\23\0\1\250\1\251\1\252\1\0\1\253"+
    "\1\254\1\0\1\255\1\256\1\0\1\257\27\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\16\27\1\260\3\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\261\1\27\7\0\20\167"+
    "\1\262\52\167\1\173\3\167\24\0\1\263\52\0\16\100"+
    "\1\264\1\0\1\265\1\100\1\266\57\100\1\267\2\100"+
    "\3\267\5\100\1\270\1\271\1\265\1\100\1\272\13\100"+
    "\22\267\1\100\1\267\1\100\1\267\1\100\3\267\124\100"+
    "\1\273\1\271\1\265\1\100\1\274\54\100\16\105\1\275"+
    "\1\105\1\276\1\0\1\277\57\105\1\267\2\105\3\267"+
    "\5\105\1\300\1\105\1\276\1\301\1\272\13\105\22\267"+
    "\1\105\1\267\1\105\1\267\1\105\3\267\124\105\1\273"+
    "\1\105\1\276\1\301\1\302\54\105\24\0\1\303\70\0"+
    "\1\273\60\0\11\114\1\115\3\114\1\115\1\304\1\114"+
    "\1\305\1\114\1\306\57\114\1\307\2\114\3\307\1\115"+
    "\3\114\1\115\1\304\1\114\1\305\1\114\1\306\13\114"+
    "\22\307\1\114\1\307\1\114\1\307\1\114\3\307\12\114"+
    "\1\267\2\114\3\267\1\115\3\114\1\115\1\310\1\114"+
    "\1\305\1\114\1\272\13\114\22\267\1\114\1\267\1\114"+
    "\1\267\1\114\3\267\20\114\1\115\3\114\1\115\72\114"+
    "\1\115\3\114\1\115\1\273\1\114\1\305\1\114\1\311"+
    "\54\114\1\0\1\312\1\0\1\312\1\0\4\312\1\313"+
    "\2\0\1\314\1\313\20\0\22\312\1\0\1\312\1\0"+
    "\1\312\1\0\3\312\10\0\1\125\1\0\1\125\1\0"+
    "\4\125\25\0\22\125\1\0\1\125\1\0\1\125\1\0"+
    "\3\125\33\0\1\315\53\0\1\127\3\0\1\127\72\0"+
    "\1\127\3\0\1\127\1\164\73\0\1\316\2\0\3\316"+
    "\25\0\22\316\1\0\1\316\1\0\1\316\1\0\3\316"+
    "\7\0\30\135\1\0\46\135\31\0\1\317\76\0\1\320"+
    "\50\0\1\321\33\0\1\322\1\323\1\324\1\325\1\326"+
    "\1\327\1\330\1\331\1\332\1\333\3\0\1\334\1\0"+
    "\1\335\1\336\1\0\1\337\1\0\1\340\13\0\11\142"+
    "\1\144\3\142\1\144\6\142\1\144\5\142\1\144\42\142"+
    "\1\144\1\142\15\0\1\341\105\0\1\342\63\0\2\151"+
    "\2\0\1\151\62\0\1\152\1\0\1\153\1\0\1\152"+
    "\72\0\1\127\2\0\1\343\1\127\17\0\1\343\52\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\5\27\1\344"+
    "\1\345\13\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\4\27"+
    "\1\346\15\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\14\27"+
    "\1\347\5\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\12\27"+
    "\1\350\7\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\20\27"+
    "\1\351\1\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\2\27"+
    "\1\352\17\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\353\1\0\1\353\1\0\1\353\1\0\1\353"+
    "\30\0\1\353\1\0\1\353\2\0\1\353\1\0\1\353"+
    "\56\0\1\354\50\0\1\27\1\0\1\355\1\0\4\27"+
    "\25\0\22\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\170\1\0\1\170\1\0\4\170\25\0\22\170"+
    "\1\0\1\170\1\0\1\170\1\0\3\170\7\0\3\171"+
    "\1\0\2\171\3\0\5\171\1\172\1\173\1\174\1\171"+
    "\1\0\13\171\22\0\1\171\1\0\1\171\1\0\1\171"+
    "\3\0\124\171\1\0\1\173\1\174\1\171\1\175\54\171"+
    "\23\0\1\154\3\0\1\356\77\0\1\357\57\0\2\201"+
    "\2\0\1\201\62\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\6\27\1\360\13\27\1\0\1\27\1\0\1\27"+
    "\1\0\2\27\1\361\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\12\27\1\362\7\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\27\1\363\20\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\4\27\1\202\15\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\15\27\1\364\4\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\7\27\1\365\1\27\1\366\10\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\367\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\6\27\1\370\2\27\1\371\1\372\7\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\12\27\1\373\7\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\20\27\1\374\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\10\27\1\375\2\27"+
    "\1\376\6\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\1\27"+
    "\1\377\20\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\1\27"+
    "\1\u0100\20\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\1\u0101"+
    "\21\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\16\27\1\u0102"+
    "\3\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\3\27\1\u0103"+
    "\16\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\3\27\1\u0104"+
    "\16\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\12\27\1\u0105"+
    "\7\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u0106\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\3\27\1\u0107\16\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u0108\3\27\1\u0109"+
    "\7\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\1\u010a\1\27"+
    "\1\u010b\17\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\16\27"+
    "\1\u010c\3\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\2\27"+
    "\1\u010d\17\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\5\27"+
    "\1\u010e\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\5\27"+
    "\1\u010f\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\12\27"+
    "\1\u0110\7\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\1\u0111"+
    "\4\27\1\u0112\14\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u0113\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\2\27\1\u0114"+
    "\1\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u0115\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\45\0\1\u0116\4\0\1\u0117\42\0\1\u0118\72\0"+
    "\1\u0119\132\0\1\u011a\75\0\1\u011b\101\0\1\u011c\111\0"+
    "\1\u011d\63\0\1\u011e\101\0\1\u011f\33\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\u0120\21\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\7\27\1\u0121\1\27\1\u0122\2\27"+
    "\1\u0123\1\27\1\u0124\2\27\1\u0125\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\7\0\77\167\11\0\2\263\2\0"+
    "\1\263\61\0\3\100\1\0\2\100\3\0\5\100\1\270"+
    "\1\271\1\265\1\100\1\0\13\100\22\0\1\100\1\0"+
    "\1\100\1\0\1\100\3\0\25\100\1\0\1\271\1\265"+
    "\1\100\1\274\54\100\1\0\1\267\1\0\1\267\1\0"+
    "\4\267\25\0\22\267\1\0\1\267\1\0\1\267\1\0"+
    "\3\267\1\0\1\u0126\5\0\3\105\1\0\2\105\3\0"+
    "\5\105\1\300\1\105\1\276\1\301\1\0\13\105\22\0"+
    "\1\105\1\0\1\105\1\0\1\105\3\0\25\105\1\0"+
    "\1\105\1\276\1\301\1\302\54\105\3\114\1\0\2\114"+
    "\3\0\1\115\3\114\1\115\1\310\1\114\1\305\1\114"+
    "\1\0\13\114\22\0\1\114\1\0\1\114\1\0\1\114"+
    "\3\0\20\114\1\115\3\114\1\115\1\0\1\114\1\305"+
    "\1\114\1\311\55\114\1\307\1\114\1\307\1\114\4\307"+
    "\1\u0127\2\114\1\u0128\1\u0127\1\304\1\114\1\305\1\114"+
    "\1\306\13\114\22\307\1\114\1\307\1\114\1\307\1\114"+
    "\3\307\7\114\11\0\1\313\3\0\1\313\62\0\1\316"+
    "\1\0\1\316\1\0\4\316\25\0\22\316\1\0\1\316"+
    "\1\0\1\316\1\0\3\316\15\0\1\u0129\73\0\1\u012a"+
    "\102\0\1\u012b\36\0\1\u012c\1\u012d\67\0\1\u012e\41\0"+
    "\1\u012f\134\0\1\u0130\21\0\1\u0131\51\0\1\u0132\7\0"+
    "\1\u0133\3\0\1\u0134\67\0\1\u0135\103\0\1\u0136\64\0"+
    "\1\u0137\1\0\1\u0138\41\0\1\u0139\37\0\1\u013a\1\u013b"+
    "\1\0\1\u013c\73\0\1\u013d\72\0\1\u013e\1\u013f\41\0"+
    "\1\u0140\34\0\1\u0141\41\0\1\u0142\34\0\1\u0143\112\0"+
    "\1\u0144\33\0\2\342\2\0\1\342\62\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u0145\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\u0146\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\4\27\1\u0147\1\u0148\1\27\1\u0149\2\27"+
    "\1\u014a\2\27\1\u014b\4\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\u014c\21\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u014d\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u014e"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\16\27\1\u014f"+
    "\3\27\1\0\1\27\1\0\1\27\1\0\3\27\36\0"+
    "\1\356\50\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\2\27\1\u0150\17\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\12\0\1\u0151\2\0\3\u0151\1\0\1\356\23\0"+
    "\22\u0151\1\0\1\u0151\1\0\1\u0151\1\0\3\u0151\20\0"+
    "\2\u0152\2\0\1\u0152\62\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\10\27\1\u0153\11\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\10\27\1\u0154\11\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\6\27\1\u0155\13\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\2\27\1\u0156\17\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\2\27\1\u0157\17\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\16\27\1\u0158\3\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u0159\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\16\27\1\u015a\3\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\6\27\1\u015b\13\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u015c\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\16\27\1\u015d"+
    "\3\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u015e\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\u015f\21\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\u0160"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\21\27\1\u0161\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\12\27\1\u0162\7\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\2\27\1\u0163\17\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0164\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u0165\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u0166"+
    "\3\27\1\u0167\7\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0168\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u0169\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\3\27\1\u016a"+
    "\16\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\12\27\1\u016b"+
    "\7\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\7\27\1\u016c"+
    "\12\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u016d"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u016e"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\16\27\1\u016f"+
    "\3\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u0170"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u0171"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\3\27\1\u0172"+
    "\16\27\1\0\1\u0173\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u0174\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\16\27\1\u0175\3\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\45\0\1\u0176\101\0"+
    "\1\u0177\122\0\1\u0178\51\0\1\u0179\75\0\1\u017a\105\0"+
    "\1\u017b\74\0\1\u017c\70\0\1\u017d\110\0\1\u017e\65\0"+
    "\1\u017f\40\0\1\27\1\0\1\27\1\0\2\27\1\u0180"+
    "\1\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\5\27\1\u0181\2\27\1\u0182\11\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\16\27\1\u0183\3\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\2\27\1\u0184\17\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\u0185\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u0186\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\7\0\11\114\1\u0127\3\114\1\u0127\1\304\1\114"+
    "\1\305\1\114\1\306\54\114\40\0\1\u0187\6\0\1\u0188"+
    "\73\0\1\u0189\102\0\1\u018a\72\0\1\u018b\101\0\1\u018c"+
    "\106\0\1\u018d\67\0\1\u018e\5\0\1\u018f\64\0\1\u0190"+
    "\73\0\1\u0191\77\0\1\u0192\100\0\1\u0193\71\0\1\u0194"+
    "\100\0\1\u0195\12\0\1\u0196\25\0\1\u0197\151\0\1\u0198"+
    "\64\0\1\u0199\35\0\1\u019a\134\0\1\u019b\75\0\1\u019c"+
    "\45\0\1\u019d\130\0\1\u019e\5\0\1\u019f\65\0\1\u01a0"+
    "\77\0\1\u01a1\7\0\1\u01a2\73\0\1\u01a3\115\0\1\u01a4"+
    "\52\0\1\u01a5\76\0\1\u01a6\75\0\1\u01a7\41\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\u01a8\16\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\u01a9\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\7\27\1\u01aa\12\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\u01ab\21\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\15\27\1\u01ac\4\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\14\27\1\u01ad\5\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\u01ae\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\13\27\1\u01af\6\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\17\27\1\u01b0\2\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\u0151\1\0\1\u0151\1\0"+
    "\4\u0151\1\u01b1\3\0\1\u01b2\20\0\22\u0151\1\0\1\u0151"+
    "\1\0\1\u0151\1\0\3\u0151\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\27\1\u01b3\20\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\5\27\1\u01b4\14\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\27\1\u01b5\20\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\13\27\1\u01b6\6\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\10\27\1\u01b7\11\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\2\27\1\u01b8\17\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\27\1\u01b9\20\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\10\27\1\u01ba\11\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\2\27\1\u01bb\17\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\u01bc\13\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\u01bd"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\15\27\1\u01be\4\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\u01bf\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\u01c0\1\0\4\27"+
    "\25\0\22\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\16\27"+
    "\1\u01c1\3\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\6\27"+
    "\1\u01c2\13\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\6\27"+
    "\1\u01c3\13\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\5\27"+
    "\1\u01c4\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\6\27"+
    "\1\u01c5\13\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\14\27"+
    "\1\u01c6\5\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\u01c7\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\12\27\1\u01c8\7\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\5\27\1\u01c9\14\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\11\27\1\u01ca\10\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\u01cb\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\u01cc"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\6\27\1\u01cd\13\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\u01ce\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\u01cf\16\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\5\27\1\u01d0\14\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\63\0\1\u01d1\62\0\1\u01d2\41\0\1\u01d3"+
    "\147\0\1\u01d4\62\0\1\u01d5\45\0\1\u01d6\72\0\1\u01d7"+
    "\6\0\1\u01d4\51\0\1\u01d8\52\0\1\u01d9\41\0\1\u01d9"+
    "\136\0\1\u01da\34\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\u01db\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\16\27\1\u01dc\3\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\u01dd\16\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\u01de\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\16\27\1\u01df\3\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\u01e0\16\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\6\27\1\u01e1\13\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\66\0\1\u01e2\22\0\1\u01e3\141\0\1\u01e4"+
    "\74\0\1\u01e5\104\0\1\u01e6\27\0\1\u01e7\76\0\1\u01e8"+
    "\142\0\1\u01e9\66\0\1\u01ea\42\0\1\u01eb\131\0\1\u01ec"+
    "\76\0\1\u01ed\76\0\1\u01ee\76\0\1\u01ef\100\0\1\u01f0"+
    "\41\0\1\u01f1\143\0\1\u01f2\77\0\1\u01f3\30\0\1\u01f4"+
    "\142\0\1\u01f5\73\0\1\u01f6\110\0\1\u01f7\75\0\1\u01f8"+
    "\24\0\1\u01f9\151\0\1\u01fa\60\0\1\u01fb\113\0\1\u01fc"+
    "\73\0\1\u01fd\67\0\1\u01fe\103\0\1\u01ff\35\0\1\u0200"+
    "\70\0\1\27\1\0\1\27\1\0\4\27\25\0\4\27"+
    "\1\u0201\15\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\11\27"+
    "\1\u0202\10\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\1\27"+
    "\1\u0203\20\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\5\27"+
    "\1\u0204\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\5\27"+
    "\1\u0205\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\7\27"+
    "\1\u0206\12\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\24\0\1\u01b2\62\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\u0207\16\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\27\1\u0208\20\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\u0209\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\16\27\1\u020a\3\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\27\1\u020b\20\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\7\27\1\u020c\12\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\4\27\1\u020d\15\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\u020e\16\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\21\27\1\u020f\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0210\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\5\27\1\u0211\14\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\3\27\1\u0212\16\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0213\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\14\27\1\u0214\5\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0215\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\6\27\1\u0216\13\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\6\27\1\u0217\13\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0218\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\12\0\1\u0219\6\0\1\u01d4\51\0\1\u01d8\51\0"+
    "\1\u01d5\106\0\1\u01d9\41\0\1\u01d4\51\0\1\u01d8\63\0"+
    "\1\u01d4\101\0\1\u021a\105\0\1\u021b\57\0\1\u01d4\73\0"+
    "\1\u021c\36\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\16\27\1\u021d\3\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u021e\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\11\27\1\u021f"+
    "\10\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\12\27\1\u0220"+
    "\7\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u0221"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u0222\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\14\27\1\u0223\5\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\65\0\1\u0224\76\0"+
    "\1\u0225\57\0\1\u0226\76\0\1\u0227\75\0\1\u0228\110\0"+
    "\1\u0229\31\0\1\u022a\132\0\1\u022b\76\0\1\u022c\76\0"+
    "\1\u022d\112\0\1\u022e\77\0\1\u022f\72\0\1\u0230\65\0"+
    "\1\u0231\122\0\1\u0232\16\0\1\u0233\136\0\1\u0234\73\0"+
    "\1\u0235\77\0\1\u0236\40\0\1\u0237\152\0\1\u0238\57\0"+
    "\1\u0239\74\0\1\u023a\107\0\1\u023b\72\0\1\u023c\73\0"+
    "\1\u023d\37\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\12\27\1\u023e\7\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\16\27\1\u023f\3\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u0240\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u0241"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\16\27\1\u0242"+
    "\3\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u0243\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\11\27\1\u0244\10\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u0245\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\u0246\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\2\27\1\u0247\17\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u0248\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0249\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u024a\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\14\27\1\u024b"+
    "\5\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\1\u024c\21\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\10\27\1\u024d\11\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\6\27\1\u024e\13\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\u024f\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\47\0\1\u0250\41\0\1\u01d4"+
    "\76\0\1\u0251\156\0\1\u01d4\14\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\u0252\1\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\u0253\13\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\12\27\1\u0254\7\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\u0255\1\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\u0256\1\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\u0257\21\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\63\0\1\u0258\66\0\1\u0259\73\0"+
    "\1\u025a\75\0\1\u025b\75\0\1\u025c\107\0\1\u025d\75\0"+
    "\1\u025e\70\0\1\u025f\40\0\1\u0260\136\0\1\u0261\103\0"+
    "\1\u0262\64\0\1\u0263\103\0\1\u0264\71\0\1\u0265\107\0"+
    "\1\u0266\76\0\1\u0267\77\0\1\u0268\65\0\1\u0269\122\0"+
    "\1\u026a\55\0\1\u026b\72\0\1\u026c\114\0\1\u026d\23\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\2\27\1\u026e"+
    "\17\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\2\27\1\u026f"+
    "\17\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\11\27\1\u0270"+
    "\10\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u0271\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u0272\1\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u0273\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\11\27\1\u0274\10\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u0275\1\27\10\0\1\27\1\0"+
    "\1\u0276\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\3\27\1\u0277\16\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\3\27\1\u0278\16\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u0279\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u027a\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\50\0"+
    "\1\u01d4\74\0\1\u01d4\40\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u027b\1\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\u027c\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u027d\1\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\11\27\1\u027e\10\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u027f\1\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\4\27\1\u0280\15\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\12\0\1\u0281\136\0\1\u0282\102\0"+
    "\1\u0283\67\0\1\u0284\76\0\1\u0285\76\0\1\u0286\104\0"+
    "\1\u0287\113\0\1\u0288\52\0\1\u0289\120\0\1\u028a\72\0"+
    "\1\u028b\24\0\1\u028c\137\0\1\u028d\35\0\1\u028e\134\0"+
    "\1\u028f\36\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u0290\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0291\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\14\27\1\u0292\5\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\u0293\21\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\u0294\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\1\u0295\21\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\u0296\21\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\u0297\13\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\4\27\1\u0298\15\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\u0299\21\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u029a\1\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\u029b\21\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\22\27\1\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\u029c\1\27\45\0\1\u029d\104\0\1\u029e\76\0\1\u029f"+
    "\106\0\1\u02a0\76\0\1\u02a1\61\0\1\u02a2\111\0\1\u02a3"+
    "\75\0\1\u02a4\65\0\1\u02a5\76\0\1\u02a6\107\0\1\u02a7"+
    "\26\0\1\27\1\0\1\u02a8\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\14\27\1\u02a9\5\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\u02aa\16\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\u02ab\16\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\7\27\1\u02ac\12\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\12\27\1\u02ad\7\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\u02ae\16\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\21\27\1\u02af\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u02b0\1\27\50\0\1\u02b1\40\0"+
    "\1\u02b2\142\0\1\u02b3\73\0\1\u02b4\71\0\1\u02b5\122\0"+
    "\1\u02b6\14\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u02b7\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u02b8\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\1\27\1\u02b9"+
    "\1\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\20\27\1\u02ba\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\51\0\1\u02bb\37\0\1\u02bc\76\0\1\u02bd\74\0"+
    "\1\27\1\0\1\u02be\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\u02bf\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u02c0\1\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\u02c1\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\16\27\1\u02c2\3\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u02c3\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u02c4\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[35091];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\4\0\1\1\10\0\1\11\11\1\2\11\2\1"+
    "\2\11\35\1\1\11\1\1\1\11\3\1\1\11\6\1"+
    "\1\11\7\1\1\11\1\1\2\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\4\1\2\11\2\1"+
    "\1\11\2\1\1\0\1\11\6\1\1\11\2\0\1\1"+
    "\1\0\1\1\2\0\1\11\2\0\46\1\1\11\1\1"+
    "\12\0\2\1\1\0\1\1\3\0\2\1\3\11\1\1"+
    "\3\0\1\1\1\11\1\1\1\11\3\0\3\1\1\0"+
    "\1\11\1\0\1\11\1\1\2\11\20\0\1\11\1\1"+
    "\1\0\10\1\1\0\1\1\2\0\46\1\12\0\6\1"+
    "\2\11\1\1\34\0\14\1\1\0\44\1\12\0\7\1"+
    "\23\0\1\11\13\0\1\11\1\0\12\1\1\11\36\1"+
    "\7\0\1\11\2\0\7\1\6\0\2\11\3\0\1\11"+
    "\4\0\1\11\5\0\1\11\10\0\30\1\4\0\7\1"+
    "\13\0\1\11\3\0\1\11\4\0\1\11\2\0\1\11"+
    "\2\0\22\1\2\0\6\1\2\0\1\11\1\0\2\11"+
    "\2\0\1\11\1\0\1\11\3\0\1\1\4\0\1\11"+
    "\1\0\1\11\23\1\1\11\12\0\1\11\1\0\2\11"+
    "\15\1\1\0\1\11\1\0\2\11\2\0\1\11\2\0"+
    "\1\11\11\1\1\11\2\0\2\11\1\0\4\1\3\11"+
    "\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[708];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public PhpLexer(int state){
        initialize(state);
    }
    public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }

    protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

	protected void pushBack(int i) {
		yypushback(i);
	}

	// A pool of states. To avoid creation of a new state on each createMemento.
	private static final IntHashtable lexerStates = new IntHashtable(100);
	
	protected IntHashtable getLexerStates() {
		return lexerStates;
	}

 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 108: 
          { return PHP_DECLARE;
          }
        case 154: break;
        case 83: 
          { return PHP_CLONE;
          }
        case 155: break;
        case 143: 
          { return PHP__METHOD__;
          }
        case 156: break;
        case 65: 
          { return PHP_FROM;
          }
        case 157: break;
        case 44: 
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
          }
        case 158: break;
        case 73: 
          { return PHP_BREAK;
          }
        case 159: break;
        case 85: 
          { return PHP_WHILE;
          }
        case 160: break;
        case 144: 
          { return PHPDOC_EXCEPTION;
          }
        case 161: break;
        case 105: 
          { return PHP_EXTENDS;
          }
        case 162: break;
        case 27: 
          { return UNKNOWN_TOKEN;
          }
        case 163: break;
        case 3: 
          { return PHP_NUMBER;
          }
        case 164: break;
        case 71: 
          { return PHP_ENDIF;
          }
        case 165: break;
        case 111: 
          { return PHP_PRIVATE;
          }
        case 166: break;
        case 96: 
          { return PHP_STATIC;
          }
        case 167: break;
        case 5: 
          { return  PHP_STRING;
          }
        case 168: break;
        case 11: 
          { if (!phpStack.isEmpty()) {
        popState();
    }
    return  PHP_CURLY_CLOSE;
          }
        case 169: break;
        case 22: 
          { popState();
	return PHP_TOKEN;
          }
        case 170: break;
        case 107: 
          { return PHP_DEFAULT;
          }
        case 171: break;
        case 106: 
          { return PHP_REQUIRE;
          }
        case 172: break;
        case 20: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return UNKNOWN_TOKEN;
          }
        case 173: break;
        case 92: 
          { return PHPDOC_LINK;
          }
        case 174: break;
        case 140: 
          { return PHP_ENDFOREACH;
          }
        case 175: break;
        case 53: 
          { return PHP_TRY;
          }
        case 176: break;
        case 125: 
          { return PHP__LINE__;
          }
        case 177: break;
        case 59: 
          { return PHP_EXIT;
          }
        case 178: break;
        case 148: 
          { return PHPDOC_FILESOURCE;
          }
        case 179: break;
        case 123: 
          { return PHP_CONTINUE;
          }
        case 180: break;
        case 136: 
          { return PHPDOC_TUTORIAL;
          }
        case 181: break;
        case 152: 
          { return PHP__FUNCTION__;
          }
        case 182: break;
        case 16: 
          { yypushback(1);
	yybegin(ST_PHP_HEREDOC);
          }
        case 183: break;
        case 118: 
          { return PHPDOC_METHOD;
          }
        case 184: break;
        case 134: 
          { return PHPDOC_ABSTRACT;
          }
        case 185: break;
        case 147: 
          { return PHPDOC_DEPRECATED;
          }
        case 186: break;
        case 54: 
          { return PHP_FOR;
          }
        case 187: break;
        case 142: 
          { return PHP_IMPLEMENTS;
          }
        case 188: break;
        case 45: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 189: break;
        case 86: 
          { return PHP_PRINT;
          }
        case 190: break;
        case 21: 
          { yypushback(1);
	popState();
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 191: break;
        case 81: 
          { return PHP_CONST;
          }
        case 192: break;
        case 49: 
          { popState();
    return PHP_LINE_COMMENT;
          }
        case 193: break;
        case 120: 
          { return PHP_ENDWHILE;
          }
        case 194: break;
        case 13: 
          { return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 195: break;
        case 26: 
          { return PHP_LINE_COMMENT;
          }
        case 196: break;
        case 141: 
          { return PHP_INSTANCEOF;
          }
        case 197: break;
        case 77: 
          { return PHP_THROW;
          }
        case 198: break;
        case 102: 
          { return PHPDOC_SINCE;
          }
        case 199: break;
        case 97: 
          { return PHP_SWITCH;
          }
        case 200: break;
        case 35: 
          { return PHP_DO;
          }
        case 201: break;
        case 138: 
          { return PHPDOC_PROPERTY;
          }
        case 202: break;
        case 40: 
          { yypushback(1);
    return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 203: break;
        case 151: 
          { return PHP_INCLUDE_ONCE;
          }
        case 204: break;
        case 8: 
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 205: break;
        case 1: 
          { return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 206: break;
        case 115: 
          { return PHPDOC_IGNORE;
          }
        case 207: break;
        case 84: 
          { return PHP_CLASS;
          }
        case 208: break;
        case 46: 
          { return PHP_OBJECT_OPERATOR;
          }
        case 209: break;
        case 98: 
          { return PHP_PARENT;
          }
        case 210: break;
        case 47: 
          { popState();
    return PHP_COMMENT_END;
          }
        case 211: break;
        case 101: 
          { return PHPDOC_FINAL;
          }
        case 212: break;
        case 31: 
          { return PHP_VARIABLE;
          }
        case 213: break;
        case 87: 
          { return PHP_CASTING;
          }
        case 214: break;
        case 80: 
          { return PHP_UNSET;
          }
        case 215: break;
        case 15: 
          { yypushback(1);
        popState();
          }
        case 216: break;
        case 38: 
          { return PHP_CLOSETAG;
          }
        case 217: break;
        case 62: 
          { return PHP_EVAL;
          }
        case 218: break;
        case 28: 
          { popState();return WHITESPACE;
          }
        case 219: break;
        case 57: 
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHP_VARIABLE;
          }
        case 220: break;
        case 55: 
          { return PHP_USE;
          }
        case 221: break;
        case 37: 
          { return PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 222: break;
        case 113: 
          { return PHPDOC_AUTHOR;
          }
        case 223: break;
        case 42: 
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
          }
        case 224: break;
        case 99: 
          { return PHP_PUBLIC;
          }
        case 225: break;
        case 36: 
          { return PHP_IF;
          }
        case 226: break;
        case 75: 
          { return PHP_ARRAY;
          }
        case 227: break;
        case 34: 
          { return PHP_AS;
          }
        case 228: break;
        case 60: 
          { return PHP_ECHO;
          }
        case 229: break;
        case 74: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    heredoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHP_HEREDOC_TAG;
          }
        case 230: break;
        case 79: 
          { return PHP_FINAL;
          }
        case 231: break;
        case 139: 
          { return PHP_ENDDECLARE;
          }
        case 232: break;
        case 19: 
          { popState();
    return PHP_STRING;
          }
        case 233: break;
        case 70: 
          { return PHPDOC_VAR;
          }
        case 234: break;
        case 23: 
          { return PHP_COMMENT;
          }
        case 235: break;
        case 112: 
          { return PHPDOC_RETURN;
          }
        case 236: break;
        case 17: 
          { heredoc=null;
    heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 237: break;
        case 104: 
          { return PHPDOC_MAGIC;
          }
        case 238: break;
        case 116: 
          { return PHPDOC_THROWS;
          }
        case 239: break;
        case 4: 
          { return PHP_TOKEN;
          }
        case 240: break;
        case 82: 
          { return PHP_CATCH;
          }
        case 241: break;
        case 14: 
          { popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 242: break;
        case 29: 
          { return PHP_OPERATOR;
          }
        case 243: break;
        case 89: 
          { return PHPDOC_DESC;
          }
        case 244: break;
        case 51: 
          { return PHP_NEW;
          }
        case 245: break;
        case 122: 
          { return PHP_FUNCTION;
          }
        case 246: break;
        case 25: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHP_LINE_COMMENT;
          }
        case 247: break;
        case 6: 
          { return  WHITESPACE;
          }
        case 248: break;
        case 2: 
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 249: break;
        case 110: 
          { return PHP_FOREACH;
          }
        case 250: break;
        case 126: 
          { return PHPDOC_EXAMPLE;
          }
        case 251: break;
        case 61: 
          { return PHP_ELSE;
          }
        case 252: break;
        case 119: 
          { return PHPDOC_GLOBAL;
          }
        case 253: break;
        case 67: 
          { return PHP_SELF;
          }
        case 254: break;
        case 95: 
          { return PHP_RETURN;
          }
        case 255: break;
        case 91: 
          { return PHPDOC_USES;
          }
        case 256: break;
        case 150: 
          { return PHP_REQUIRE_ONCE;
          }
        case 257: break;
        case 30: 
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
          }
        case 258: break;
        case 18: 
          { yypushback(1);
    popState();
          }
        case 259: break;
        case 32: 
          { pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
          }
        case 260: break;
        case 64: 
          { return PHP_TRUE;
          }
        case 261: break;
        case 130: 
          { return PHP_ENDSWITCH;
          }
        case 262: break;
        case 24: 
          { return PHPDOC_COMMENT;
          }
        case 263: break;
        case 145: 
          { return PHPDOC_COPYRIGHT;
          }
        case 264: break;
        case 137: 
          { return PHPDOC_CATEGORY;
          }
        case 265: break;
        case 93: 
          { return PHP_ENDFOR;
          }
        case 266: break;
        case 78: 
          { return PHP_FALSE;
          }
        case 267: break;
        case 132: 
          { return PHP_PROTECTED;
          }
        case 268: break;
        case 33: 
          { if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	return UNKNOWN_TOKEN;
          }
        case 269: break;
        case 9: 
          { pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 270: break;
        case 58: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	   yypushback(1);
        yybegin(ST_PHP_END_HEREDOC);
    }
        return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 271: break;
        case 149: 
          { return PHPDOC_SUBPACKAGE;
          }
        case 272: break;
        case 56: 
          { return PHP_VAR;
          }
        case 273: break;
        case 94: 
          { return PHP_ELSEIF;
          }
        case 274: break;
        case 109: 
          { return PHP_INCLUDE;
          }
        case 275: break;
        case 128: 
          { return PHPDOC_PACKAGE;
          }
        case 276: break;
        case 88: 
          { return PHPDOC_NAME;
          }
        case 277: break;
        case 68: 
          { return PHP_LIST;
          }
        case 278: break;
        case 153: 
          { return PHP_HALT_COMPILER;
          }
        case 279: break;
        case 114: 
          { return PHPDOC_ACCESS;
          }
        case 280: break;
        case 72: 
          { return PHP_EMPTY;
          }
        case 281: break;
        case 127: 
          { return PHPDOC_LICENSE;
          }
        case 282: break;
        case 66: 
          { return PHP_CASE;
          }
        case 283: break;
        case 133: 
          { return PHP__CLASS__;
          }
        case 284: break;
        case 52: 
          { return PHP_DIE;
          }
        case 285: break;
        case 76: 
          { return PHP_ISSET;
          }
        case 286: break;
        case 124: 
          { return PHP__FILE__;
          }
        case 287: break;
        case 146: 
          { return PHPDOC_STATICVAR;
          }
        case 288: break;
        case 100: 
          { return PHP_GLOBAL;
          }
        case 289: break;
        case 131: 
          { return PHP_INTERFACE;
          }
        case 290: break;
        case 69: 
          { return PHPDOC_SEE;
          }
        case 291: break;
        case 41: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
          }
        case 292: break;
        case 90: 
          { return PHPDOC_TODO;
          }
        case 293: break;
        case 48: 
          { popState();
    return PHPDOC_COMMENT_END;
          }
        case 294: break;
        case 7: 
          { return PHP_SEMICOLON;
          }
        case 295: break;
        case 39: 
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
          }
        case 296: break;
        case 50: 
          { if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHP_LINE_COMMENT;
          }
        case 297: break;
        case 117: 
          { return PHPDOC_STATIC;
          }
        case 298: break;
        case 43: 
          { yypushback(1);
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 299: break;
        case 63: 
          { pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
          }
        case 300: break;
        case 103: 
          { return PHPDOC_PARAM;
          }
        case 301: break;
        case 12: 
          { pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
          }
        case 302: break;
        case 121: 
          { return PHP_ABSTRACT;
          }
        case 303: break;
        case 135: 
          { return PHPDOC_INTERNAL;
          }
        case 304: break;
        case 10: 
          { return PHP_CURLY_OPEN;
          }
        case 305: break;
        case 129: 
          { return PHPDOC_VERSION;
          }
        case 306: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
